package expansionAlgorithm.rocchio;

import indexer.Posting;
import indexer.PostingNode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

import expansionAlgorithm.rocchio.sortAlgorithm.*;
import bing.Result;

public class Rocchio {

	/**
	 * these are the three rocchio controlling parameter a controls the old
	 * query B controls the relevant docs y controls the non-relevant docs taken
	 * from Modern Information Retrieval: A Brief Overview, Chapter 9
	 */
	private double a = 1; // we don't use this, because we never delete query
							// term
	private double B = 0.75;
	private double y = 0.15;

	/**
	 * 
	 * @param index
	 * @param docs
	 * @param queryTerms
	 * @return
	 * 
	 *         this method will calculate the best two terms to expand query
	 *         ret[0] the second highest score term ret[1] highest score term
	 */
	public String[] calBestTwoTerm(HashMap<String, Posting> index, String query) {

		String[] queryArr = query.split("\\+");
		HashSet<String> queryTerms = new HashSet<String>();
		for (String term : queryArr)
			queryTerms.add(term);

		// this arr stores the calculated term and their score, only storing two highest terms
		Double[] termScore = new Double[]{Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY};
		String[] ret = new String[]{"",""};

		// calculate the score one term at a time, only storing the two highest
		// score
		Iterator<Map.Entry<String, Posting>> it = index.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<String, Posting> pairs = (Map.Entry<String, Posting>) it
					.next();
			String key = pairs.getKey();
			ArrayList<PostingNode> posting = pairs.getValue().getPosting();

			Double score = 0.0;
			SortAlgorithm sa = new BM25();

			//only calculate the terms did not appear in the original query
			if (!queryTerms.contains(key)) {
				for (PostingNode node : posting) {
					if (node.getDoc().getRelevant()) {
						score += B * sa.calScore(index, key, node);
					} else {
						score -= y * sa.calScore(index, key, node);
					}
				}
				
				//insertion sort on termScore, only 2 elements, so constant time
				//only store postive score string
				if(score>0){
					if(termScore[0]<score && score<= termScore[1]){
						termScore[0] = score;
						ret[0] = key;
					}else if(score > termScore[1]){
						termScore[0] = termScore[1];
						ret[0] = ret[1];
						termScore[1] = score;
						ret[1] = key;
					}
				}
			}

		}
		
		if(ret[0]==""){
			if(ret[1]==""){
				return new String[]{};
			}
			else{
				return new String[]{ret[1]};
			}
		}else{
			return ret;
		}

	}

}
